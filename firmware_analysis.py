import argparse
import os
from extract import search_signatures, extract_files
from generate_hexdump import generate_hexdump
from decryption import attempt_decryption, common_decryptions
from cve_scan import scan_for_cves
from scan_sensitive import scan_sensitive_files

def main():
    parser = argparse.ArgumentParser(description='Firmware Insight - Comprehensive Firmware Analysis Tool')
    parser.add_argument('file', help='The binary file to analyze.')
    parser.add_argument('-o', '--output', default='output', help='Directory to store extracted files.')
    args = parser.parse_args()

    os.makedirs(args.output, exist_ok=True)

    print(f"Analyzing file: {args.file}")
    results = search_signatures(args.file)
    if results:
        print("Found signatures:")
        for offset, file_type, _ in results:
            print(f" - {file_type} file at offset {offset}")
        extract_files(args.file, results, args.output)
    else:
        print("No known signatures found.")
    
    extracted_files = [os.path.join(args.output, f) for f in os.listdir(args.output)]

    # Attempt decryption with common keys and IVs if no specific key and IV are provided
    common_decryptions(extracted_files, args.output)

    for file in extracted_files:
        hexdump_file = os.path.join(args.output, f"{os.path.basename(file)}.hexdump")
        generate_hexdump(file, hexdump_file)

    cve_results = scan_for_cves(extracted_files)
    for filename, cve_data in cve_results:
        print(f"CVE results for {filename}:")
        if isinstance(cve_data, str):
            print(cve_data)
        else:
            for cve in cve_data:
                print(f" - {cve['id']}: {cve['summary']}")

    scan_sensitive_files(args.output)

if __name__ == "__main__":
    main()
