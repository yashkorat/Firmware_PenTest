from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend
from common_keys import COMMON_KEYS

def attempt_decryption(file_path, key, iv):
    with open(file_path, 'rb') as f:
        ciphertext = f.read()
        backend = default_backend()
        cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=backend)
        decryptor = cipher.decryptor()
        plaintext = decryptor.update(ciphertext) + decryptor.finalize()
    return plaintext

def common_decryptions(extracted_files, output_dir):
    for file in extracted_files:
        for key, iv in COMMON_KEYS:
            try:
                plaintext = attempt_decryption(file, key, iv)
                decrypted_file = os.path.join(output_dir, f"decrypted_{os.path.basename(file)}")
                with open(decrypted_file, 'wb') as f:
                    f.write(plaintext)
                print(f"Decrypted file saved to {decrypted_file} using common key and IV.")
                break
            except Exception as e:
                continue
